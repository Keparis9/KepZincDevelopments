/*
HealUnit(unit target, real heal)
ManaUnit(unit target, real mana)

target      цель
heal/mana   Сколько восстановить здоровья/маны

RegenHeal(unit target, real heal, real time, real tickrate, integer mode)
RegenMana(unit target, real mana, real time, real tickrate, integer mode)
EXRegenHeal(unit target, real heal, real time) Упрощённая версия без мода[0] и тикрейта[0.23]
EXRegenMana(unit target, real mana, real time) Упрощённая версия без мода[0] и тикрейта[0.23]

time        Время за котороё нужно восстановить указанные хп/мп
tickrate    Сколько пауза между лечением, по дефолту 0.2
mode        0 - регенит указанное значение КАЖДЫЙ тик, 1 - регенит указанное значение в течении ВСЕХ тиков
*/




library RestoreUnitState requires DefaultTextTag, LibTimer {   
    function RestoreUnitState(real restore, unit target, integer index){
            real nrestore = (GetUnitState(target,UnitMaxState[index])- GetUnitState(target,UnitState[index])); //недостающее хп/мп
            if (restore>nrestore) restore = nrestore;
            if (UnitAlive(target) && restore != 0) {
                SetUnitState(target, UnitState[index],GetUnitState(target,UnitState[index])+ restore);
                //BJDebugMsg("RestoreUnitState");
                if (index == 0) TTHeal(target, I2S(R2I(restore)));
                if (index == 1) TTMana(target, I2S(R2I(restore)));
                }
            }
            
            
        function RegenUnitState_update() {
            Timer tmr = Timer.expired();
            //BJDebugMsg("RegenUnitState_update");
            //BJDebugMsg(R2S(tmr.restore));
            //BJDebugMsg(GetUnitName(tmr.target));
            //BJDebugMsg(I2S(tmr.index));
            RestoreUnitState(tmr.restore,tmr.target,tmr.index);
            tmr.tick = tmr.tick + 1;
            if (tmr.tick >= tmr.count) tmr.delete();
            
            }
        
        function RegenUnitState(real restore, unit target, integer index, real time, real tickrate, integer mode){
            Timer tmr = Timer.create();
            //BJDebugMsg("RegenUnitState");
            
            if (tickrate <= 0.02) tickrate = 0.2;
            tmr.index = index;
            tmr.target = target;
            tmr.count = R2I(time/tickrate);
            if (mode == fixrestore) tmr.restore = restore;
            if (mode == disrestore) tmr.restore = restore/tmr.count;
            tmr.tick = 0;
            
            tmr.start(0.2, true, function RegenUnitState_update);
            }    



    public {
        //real HealTotal
        //real ManaRestoreTotal
        constant integer fixrestore = 0;
        constant integer disrestore = 1;
        constant integer Heal = 0;
        constant integer ManaRestore = 1;
        
        
        function HealUnit(unit target, real heal) {
            RestoreUnitState(heal,target,Heal);
        }
        function ManaUnit(unit target, real mana) {
            RestoreUnitState(mana,target,ManaRestore);
        }
        
        
        
        function EXRegenHeal(unit target, real heal, real time) {
            //BJDebugMsg("EXRegenHeal");
            RegenUnitState(heal,target,Heal,time,0.23,0);
        }
        function EXRegenMana(unit target, real mana, real time) {
            RegenUnitState(mana,target,ManaRestore,time,0.23,0);
        }
        function RegenHeal(unit target, real heal, real time, real tickrate, integer mode) {
            RegenUnitState(heal,target,Heal,time,tickrate,mode);
        }
        function RegenMana(unit target, real mana, real time, real tickrate, integer mode) {
            RegenUnitState(mana,target,ManaRestore,time,tickrate,mode);
        }
        
    }
    
    unitstate UnitMaxState[2];
    unitstate UnitState[2];

    function onInit() {
        UnitMaxState[Heal] = UNIT_STATE_MAX_LIFE;
        UnitState[Heal] = UNIT_STATE_LIFE;

        UnitMaxState[ManaRestore] = UNIT_STATE_MAX_MANA;
        UnitState[ManaRestore] = UNIT_STATE_MANA;
    }
}
